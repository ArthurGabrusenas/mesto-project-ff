(()=>{"use strict";var __webpack_modules__={674:()=>{eval('\n;// ./src/components/modal.js\nvar currentOpenModal;\nfunction openModal(popupElement) {\n  currentOpenModal = popupElement;\n  currentOpenModal.classList.add("popup_is-opened");\n  document.addEventListener("keydown", closeModalByEsc);\n}\nfunction addClassforAnimated(element) {\n  element.classList.add("popup_is-animated");\n}\nfunction closeModal() {\n  currentOpenModal.classList.remove("popup_is-opened");\n  document.removeEventListener("keydown", closeModalByEsc);\n}\nfunction closeModalByOverlay(evt) {\n  var isCurrentPopup = evt.target.closest(".popup__content");\n  var isCloseButton = evt.target.classList.contains("popup__close");\n  if (!isCurrentPopup || isCloseButton) {\n    closeModal();\n  }\n}\nfunction closeModalByEsc(evt) {\n  if (evt.key === "Escape") {\n    closeModal();\n  }\n}\n\n;// ./src/components/api.js\nvar config = {\n  baseUrl: "https://mesto.nomoreparties.co/v1/cohort-mag-4",\n  headers: {\n    authorization: "a07a52dc-b599-4d03-9712-8ec6628640b6",\n    "Content-Type": "application/json"\n  }\n};\nfunction checkResponce(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 ".concat(res.status));\n}\nvar getUserInfo = function getUserInfo() {\n  return fetch("".concat(config.baseUrl, "/users/me"), {\n    headers: config.headers\n  }).then(function (res) {\n    return checkResponce(res);\n  });\n};\nvar getInitialCards = function getInitialCards() {\n  return fetch("".concat(config.baseUrl, "/cards"), {\n    headers: config.headers\n  }).then(function (res) {\n    return checkResponce(res);\n  });\n};\nvar editUserInfo = function editUserInfo(nameValue, jobValue) {\n  return fetch("".concat(config.baseUrl, "/users/me"), {\n    method: "PATCH",\n    headers: config.headers,\n    body: JSON.stringify({\n      name: nameValue,\n      about: jobValue\n    })\n  }).then(function (res) {\n    return checkResponce(res);\n  });\n};\nvar postNewCard = function postNewCard(placeName, placeLink) {\n  return fetch("".concat(config.baseUrl, "/cards"), {\n    method: "POST",\n    headers: config.headers,\n    body: JSON.stringify({\n      name: placeName,\n      link: placeLink\n    })\n  }).then(function (res) {\n    return checkResponce(res);\n  });\n};\nvar editAvatar = function editAvatar(avatarLink) {\n  return fetch("".concat(config.baseUrl, "/users/me/avatar"), {\n    method: "PATCH",\n    headers: config.headers,\n    body: JSON.stringify({\n      avatar: avatarLink\n    })\n  }).then(function (res) {\n    return checkResponce(res);\n  });\n};\nvar removeCardFromServer = function removeCardFromServer(cardId) {\n  return fetch("".concat(config.baseUrl, "/cards/").concat(cardId), {\n    method: "DELETE",\n    headers: config.headers\n  }).then(function (res) {\n    return checkResponce(res);\n  });\n};\nvar likeCardOnServer = function likeCardOnServer(cardId) {\n  return fetch("".concat(config.baseUrl, "/cards/likes/").concat(cardId), {\n    method: "PUT",\n    headers: config.headers\n  }).then(function (res) {\n    return checkResponce(res);\n  });\n};\nvar removeLikeFromServer = function removeLikeFromServer(cardId) {\n  return fetch("".concat(config.baseUrl, "/cards/likes/").concat(cardId), {\n    method: "DELETE",\n    headers: config.headers\n  }).then(function (res) {\n    return checkResponce(res);\n  });\n};\n\n;// ./src/components/card.js\n\nfunction removeCard(evt, itemId) {\n  removeCardFromServer(itemId).then(function (res) {\n    evt.target.closest(".card").remove();\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\nfunction createCard(item, cardTemplate, openImage, removeCard, likeCard, userId) {\n  var card = cardTemplate.querySelector(".places__item").cloneNode(true);\n  var cardImage = card.querySelector(".card__image");\n  var cardTitle = card.querySelector(".card__title");\n  var deleteButton = card.querySelector(".card__delete-button");\n  var likeButton = card.querySelector(".card__like-button");\n  var likeCount = card.querySelector(".card__like-count");\n  cardImage.src = item.link;\n  cardImage.alt = item.name;\n  cardTitle.textContent = item.name;\n  hideNotMyDeleteButton(item, userId, deleteButton);\n  setLikesCount(item, likeCount);\n  checkLikeByMyself(item, userId, likeButton);\n  deleteButton.addEventListener("click", function (evt) {\n    return removeCard(evt, item._id);\n  });\n  likeButton.addEventListener("click", function () {\n    return likeCard(item, likeButton, likeCount);\n  });\n  cardImage.addEventListener("click", openImage);\n  return card;\n}\nfunction likeCard(item, likeButton, likeCount) {\n  var isMyLikeAlreadyOn = likeButton.classList.contains("card__like-button_is-active");\n  if (isMyLikeAlreadyOn) {\n    removeLikeFromServer(item._id).then(function (res) {\n      likeButton.classList.remove("card__like-button_is-active");\n      setLikesCount(res, likeCount);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  } else {\n    likeCardOnServer(item._id).then(function (res) {\n      likeButton.classList.add("card__like-button_is-active");\n      setLikesCount(res, likeCount);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n}\nfunction setLikesCount(item, likeCount) {\n  if (item.likes.length > 0) {\n    return likeCount.textContent = item.likes.length;\n  } else {\n    return likeCount.textContent = "";\n  }\n}\nfunction checkLikeByMyself(item, userId, likeButton) {\n  var equal = function equal(element) {\n    return element._id == userId;\n  };\n  var isMyLike = item.likes.some(equal);\n  if (isMyLike) return likeButton.classList.add("card__like-button_is-active");\n}\nfunction hideNotMyDeleteButton(item, userId, deleteButton) {\n  if (item.owner._id != userId) return deleteButton.style.display = "none";\n}\n\n;// ./src/components/validation.js\nfunction enableValidation(settingsObject) {\n  var formList = Array.from(document.querySelectorAll(settingsObject.formSelector));\n  formList.forEach(function (formElement) {\n    setEventListeners(formElement, settingsObject);\n  });\n}\nfunction setEventListeners(formElement, settingsObject) {\n  var inputList = Array.from(formElement.querySelectorAll(settingsObject.inputSelector));\n  var buttonElement = formElement.querySelector(settingsObject.submitButtonSelector);\n  clearValidation(formElement, buttonElement, inputList, settingsObject);\n  inputList.forEach(function (inputElement) {\n    inputElement.addEventListener("input", function () {\n      if (formElement.closest(".popup_is-opened")) {\n        isValid(formElement, inputElement, settingsObject);\n        toggleButtonState(inputList, buttonElement, settingsObject);\n      }\n    });\n  });\n}\nfunction clearValidation(formElement, buttonElement, inputList, settingsObject) {\n  toggleButtonState(inputList, buttonElement, settingsObject);\n  inputList.forEach(function (inputElement) {\n    hideInputError(formElement, inputElement, settingsObject);\n  });\n}\nfunction isValid(formElement, inputElement, settingsObject) {\n  if (!inputElement.validity.valid) {\n    showInputError(formElement, inputElement, inputElement.validationMessage, settingsObject);\n  } else {\n    hideInputError(formElement, inputElement, settingsObject);\n  }\n}\nfunction showInputError(formElement, inputElement, errorMessage, settingsObject) {\n  var errorElement = formElement.querySelector(".".concat(inputElement.id, "-error"));\n  inputElement.classList.add(settingsObject.inputErrorClass);\n  errorElement.classList.add(settingsObject.errorClass);\n  if (inputElement.validity.patternMismatch) {\n    errorElement.textContent = inputElement.dataset.errorMessage;\n  } else {\n    errorElement.textContent = errorMessage;\n  }\n}\nfunction hideInputError(formElement, inputElement, settingsObject) {\n  var errorElement = formElement.querySelector(".".concat(inputElement.id, "-error"));\n  inputElement.classList.remove(settingsObject.inputErrorClass);\n  errorElement.classList.remove(settingsObject.errorClass);\n  errorElement.textContent = "";\n}\nfunction toggleButtonState(inputList, buttonElement, settingsObject) {\n  if (hasInvalidInput(inputList, buttonElement)) {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(settingsObject.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(settingsObject.inactiveButtonClass);\n  }\n}\nfunction hasInvalidInput(inputList) {\n  return inputList.some(function (inputElement) {\n    return !inputElement.validity.valid;\n  });\n}\n\n;// ./src/components/index.js\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\nvar cardTemplate = document.querySelector("#card-template").content;\nvar placesList = document.querySelector(".places__list");\nvar profileEditButton = document.querySelector(".profile__edit-button");\nvar profileAddButton = document.querySelector(".profile__add-button");\nvar popupEdit = document.querySelector(".popup_type_edit");\nvar popupNewCard = document.querySelector(".popup_type_new-card");\nvar popupTypeEditAvatar = document.querySelector(".popup_type_edit-avatar");\nvar popupImage = document.querySelector(".popup_type_image");\nvar editProfileForm = document.querySelector("[name=edit-profile]");\nvar newPlaceForm = document.querySelector("[name=new-place]");\nvar editProfileAvatar = document.querySelector("[name=edit-profile-image]");\nvar nameInput = document.querySelector(".popup__input_type_name");\nvar jobInput = document.querySelector(".popup__input_type_description");\nvar newPlaceName = document.querySelector(".popup__input_type_card-name");\nvar newPlaceLink = document.querySelector(".popup__input_type_url");\nvar newAvatarLink = document.querySelector(".popup__input_type_avatar_url");\nvar profileTitle = document.querySelector(".profile__title");\nvar profileDescription = document.querySelector(".profile__description");\nvar profileImage = document.querySelector(".profile__image");\nvar openedImage = popupImage.querySelector(".popup__image");\nvar openedImageCaption = popupImage.querySelector(".popup__caption");\nvar profileInputList = Array.from(editProfileForm.querySelectorAll(\'.popup__input\'));\nvar newPlaceInputList = Array.from(newPlaceForm.querySelectorAll(\'.popup__input\'));\nvar avatarInputList = Array.from(editProfileAvatar.querySelectorAll(\'.popup__input\'));\nvar userId;\nPromise.all([getUserInfo(), getInitialCards()]).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    userInfo = _ref2[0],\n    cardsInfo = _ref2[1];\n  profileTitle.textContent = userInfo.name;\n  profileDescription.textContent = userInfo.about;\n  profileImage.style.backgroundImage = "url(".concat(userInfo.avatar, ")");\n  userId = userInfo._id;\n  cardsInfo.forEach(function (item) {\n    var card = makeCard(item, userId);\n    placesList.append(card);\n  });\n}).catch(function (err) {\n  console.log(err);\n});\nfunction makeCard(item, userId) {\n  var card = createCard(item, cardTemplate, openImage, removeCard, likeCard, userId);\n  return card;\n}\nfunction openImage(evt) {\n  openModal(popupImage);\n  openedImage.src = evt.target.src;\n  openedImageCaption.textContent = evt.target.alt;\n}\nprofileEditButton.addEventListener("click", function () {\n  openModal(popupEdit);\n  fillEditModalInputs();\n  var buttonElement = editProfileForm.querySelector(\'.popup__button\');\n  clearValidation(editProfileForm, buttonElement, profileInputList, validationConfig);\n});\nprofileAddButton.addEventListener("click", function () {\n  openModal(popupNewCard);\n  newPlaceForm.reset();\n  var buttonElement = newPlaceForm.querySelector(\'.popup__button\');\n  clearValidation(newPlaceForm, buttonElement, newPlaceInputList, validationConfig);\n});\nprofileImage.addEventListener("click", function () {\n  openModal(popupTypeEditAvatar);\n  editProfileAvatar.reset();\n  var buttonElement = editProfileAvatar.querySelector(\'.popup__button\');\n  clearValidation(editProfileAvatar, buttonElement, avatarInputList, validationConfig);\n});\npopupEdit.addEventListener("click", closeModalByOverlay);\npopupNewCard.addEventListener("click", closeModalByOverlay);\npopupImage.addEventListener("click", closeModalByOverlay);\npopupTypeEditAvatar.addEventListener("click", closeModalByOverlay);\naddClassforAnimated(popupEdit);\naddClassforAnimated(popupNewCard);\naddClassforAnimated(popupImage);\naddClassforAnimated(popupTypeEditAvatar);\nfunction handleProfileFormSubmit(evt) {\n  evt.preventDefault();\n  var submitButton = evt.target.querySelector(".popup__button");\n  submitButton.textContent = "Сохранение...";\n  var nameValue = nameInput.value;\n  var jobValue = jobInput.value;\n  editUserInfo(nameValue, jobValue).then(function (result) {\n    profileTitle.textContent = result.name;\n    profileDescription.textContent = result.about;\n    submitButton.textContent = "Сохранить";\n    closeModal();\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\nfunction handleNewPlaceFormSubmit(evt) {\n  evt.preventDefault();\n  var submitButton = evt.target.querySelector(".popup__button");\n  submitButton.textContent = "Сохранение...";\n  var newPlaceNameValue = newPlaceName.value;\n  var newPlaceLinkValue = newPlaceLink.value;\n  postNewCard(newPlaceNameValue, newPlaceLinkValue).then(function (cardInfo) {\n    var newCardObj = {\n      name: cardInfo.name,\n      link: cardInfo.link,\n      likes: cardInfo.likes,\n      _id: cardInfo._id,\n      owner: cardInfo.owner,\n      createdAt: new Date().toJSON()\n    };\n    var card = makeCard(newCardObj, userId);\n    placesList.prepend(card);\n    submitButton.textContent = "Сохранить";\n    closeModal();\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\nfunction handleEditProfileAvatarSubmit(evt) {\n  evt.preventDefault();\n  var submitButton = evt.target.querySelector(".popup__button");\n  submitButton.textContent = "Сохранение...";\n  var newAvatarValue = newAvatarLink.value;\n  editAvatar(newAvatarValue).then(function (res) {\n    profileImage.style.backgroundImage = "url(".concat(res.avatar, ")");\n    submitButton.textContent = "Сохранить";\n    closeModal();\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\nfunction fillEditModalInputs() {\n  nameInput.value = profileTitle.textContent;\n  jobInput.value = profileDescription.textContent;\n}\neditProfileForm.addEventListener("submit", handleProfileFormSubmit);\nnewPlaceForm.addEventListener("submit", handleNewPlaceFormSubmit);\neditProfileAvatar.addEventListener("submit", handleEditProfileAvatarSubmit);\nvar validationConfig = {\n  formSelector: ".popup__form",\n  inputSelector: ".popup__input",\n  submitButtonSelector: ".popup__button",\n  inactiveButtonClass: "popup__button_inactive",\n  inputErrorClass: "popup__input_type_error",\n  errorClass: "popup__input_error_active"\n};\nenableValidation(validationConfig);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///674\n')}},__webpack_exports__={};__webpack_modules__[674]()})();